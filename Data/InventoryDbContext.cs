using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Newtonsoft.Json;
using IIMSv1.Models;


namespace IIMSv1.Data
{
    public class InventoryDbContext: IdentityDbContext
    {   
        public DbSet<Department> Departments { get; set; }
        public DbSet<DepartmentCluster> departmentClusters { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<AccountUser> AccountCredentials { get; set; }
        public DbSet<Items> Items { get; set; }
        public DbSet<ItemUnit> ItemUnits { get; set; }
        public DbSet<ItemType> ItemType { get; set; }
        public DbSet<Supplies> Supplies { get; set; }
        public DbSet<ItemPrice> ItemPrice { get; set; }
        public DbSet<ItemSpecs> ItemSpecs { get; set; }
        public DbSet<ItemSpecValue> ItemSpecValue { get; set; }
        public DbSet<ItemSpecType> ItemSpecType { get; set; }
        public DbSet<Log> Logs { get; set; }
        public DbSet<Released> Released { get; set; }
        public DbSet<ReleaseHistory> ReleaseHistory { get; set; }
        public DbSet<ItemQuantityHistory> QuantityHistory { get; set; }
        public InventoryDbContext(DbContextOptions<InventoryDbContext> options)
            : base(options)
        {

        }


        public async Task<int> SaveChanges(string userId, string activity)
        {
            var auditEntries = OnBeforeSaveChanges(userId, activity);
            var result = base.SaveChanges();
            await OnAfterSaveChanges(auditEntries);
            return result;
        }

        public async Task<int> SaveChangesAsync(string userId, string activity, CancellationToken cancellationToken = default(CancellationToken))
        {
            var auditEntries = OnBeforeSaveChanges(userId, activity);
            var result = base.SaveChanges();
            await OnAfterSaveChanges(auditEntries);
            return result;
        }

        private List<AuditLogEntry> OnBeforeSaveChanges(string userId, string activity)
        {
            ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditLogEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                if (entry.Entity is Log || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                    continue;

                var auditEntry = new AuditLogEntry(entry, userId, activity);
                auditEntry.TableName = entry.Metadata.GetTableName();
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {
                    // The following condition is ok with EF Core 2.2 onwards.
                    // If you are using EF Core 2.1, you may need to change the following condition to support navigation properties: https://github.com/dotnet/efcore/issues/17700
                    // if (property.IsTemporary || (entry.State == EntityState.Added && property.Metadata.IsForeignKey()))
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Deleted:
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                            }
                            break;
                    }
                }
            }

            // Save audit entities that have all the modifications
            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                Logs.Add(auditEntry.ToAudit());
            }

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

        private Task OnAfterSaveChanges(List<AuditLogEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return Task.CompletedTask;

            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the AuditLog entry
                Logs.Add(auditEntry.ToAudit());
            }

            return SaveChangesAsync();
        }

    }

    public class AuditLogEntry
    {
        public AuditLogEntry(EntityEntry entry, string userId, string activity)
        {
            Entry = entry;
            UserId = userId;
            Activity = activity;
        }

        public string UserId { get; set; }
        public string Activity { get; set; }

        public EntityEntry Entry { get; }
        public string TableName { get; set; }
        public Dictionary<string, object> KeyValues { get; } = new Dictionary<string, object>();
        public Dictionary<string, object> OldValues { get; } = new Dictionary<string, object>();
        public Dictionary<string, object> NewValues { get; } = new Dictionary<string, object>();
        public List<PropertyEntry> TemporaryProperties { get; } = new List<PropertyEntry>();

        public bool HasTemporaryProperties => TemporaryProperties.Any();

        public Log ToAudit()
        {
            var auditlog = new Log();
            auditlog.Id = Guid.NewGuid().ToString();
            auditlog.UserId = UserId;
            auditlog.Activity = Activity;
            auditlog.TableName = TableName;
            auditlog.DateTime = DateTime.UtcNow;
            auditlog.KeyValues = JsonConvert.SerializeObject(KeyValues);
            auditlog.OldValues = OldValues.Count == 0 ? null : JsonConvert.SerializeObject(OldValues); // In .NET Core 3.1+, you can use System.Text.Json instead of Json.NET
            auditlog.NewValues = NewValues.Count == 0 ? null : JsonConvert.SerializeObject(NewValues);
            return auditlog;
        }
    }

}
